import numpy as np
import cv2
import mediapipe as mp
import os
import time
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Initialize Mediapipe Face Mesh
mp_face_mesh = mp.solutions.face_mesh
face_mesh = mp_face_mesh.FaceMesh(min_detection_confidence=0.5, min_tracking_confidence=0.5)
mp_drawing = mp.solutions.drawing_utils
drawing_spec = mp_drawing.DrawingSpec(color=(128, 0, 128), thickness=2, circle_radius=1)

# Base input directory
base_input_dir = r'C:\i.bug data\N6'

# Process each subfolder in the base directory
for subfolder in os.listdir(base_input_dir):
    input_dir = os.path.join(base_input_dir, subfolder)
    output_dir = os.path.join(base_input_dir, subfolder, 'output')
    os.makedirs(output_dir, exist_ok=True)

    # Initialize DataFrame for storing directions
    df = pd.DataFrame(columns=["Filename", "Direction"])

    # Initialize lists for x and y values
    x_values = []
    y_values = []

    data = {
        'frame_id': [],
        'x': [],
        'y': []
        }

    # Process each image in the input directory
    for filename in os.listdir(input_dir):
        if filename.endswith(".jpg") or filename.endswith(".png"):
            print(f"Processing file: {filename}")
            image_path = os.path.join(input_dir, filename)
            image = cv2.imread(image_path)

            
            if image is None:
                print(f"Failed to read image {filename}")
                continue

            start = time.time()


            image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)  # Convert to RGB
            image.flags.writeable = False

            results = face_mesh.process(image)

            image.flags.writeable = True
            image = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)  # Convert back to BGR

            img_h, img_w, img_c = image.shape
            face_2d = []
            face_3d = []

            if results.multi_face_landmarks:
                print(f"Face landmarks detected for {filename}")

                for face_landmarks in results.multi_face_landmarks:
                    for idx, lm in enumerate(face_landmarks.landmark):
                        if idx in [33, 263, 1, 61, 291, 199]:
                            if idx == 1:
                                nose_2d = (lm.x * img_w, lm.y * img_h)
                                nose_3d = (lm.x * img_w, lm.y * img_h, lm.z * 3000)
                            x, y = int(lm.x * img_w), int(lm.y * img_h)
                            face_2d.append([x, y])
                            face_3d.append([x, y, lm.z])

                    # Get 2D and 3D coordinates
                    face_2d = np.array(face_2d, dtype=np.float64)
                    face_3d = np.array(face_3d, dtype=np.float64)

                    focal_length = 1 * img_w
                    cam_matrix = np.array([[focal_length, 0, img_w / 2],
                                           [0, focal_length, img_h / 2],
                                           [0, 0, 1]])
                    distortion_matrix = np.zeros((4, 1), dtype=np.float64)

                    success, rotation_vec, translation_vec = cv2.solvePnP(face_3d, face_2d, cam_matrix, distortion_matrix)

                    # Getting rotational of face
                    rmat, jac = cv2.Rodrigues(rotation_vec)
                    angles, mtxR, mtxQ, Qx, Qy, Qz = cv2.RQDecomp3x3(rmat)
                    x = angles[0] * 360
                    y = angles[1] * 360
                    z = angles[2] * 360

                    x_values.append(x)
                    y_values.append(y)

                    data['frame_id'].append(filename)
                    data['x'].append(x)
                    data['y'].append(y)

                    # Determine head pose
                    if y < -10:
                        text = "Looking Left"
                    elif y > 10:
                        text = "Looking Right"
                    elif x < -10:
                        text = "Looking Down"
                    elif x > 10:
                        text = "Looking Up"
                    else:
                        text = "Forward"
                    print(text)

                    nose_3d_projection, jacobian = cv2.projectPoints(nose_3d, rotation_vec, translation_vec, cam_matrix, distortion_matrix)
                    p1 = (int(nose_2d[0]), int(nose_2d[1]))
                    p2 = (int(nose_2d[0] + y * 10), int(nose_2d[1] - x * 10))
                    cv2.line(image, p1, p2, (255, 0, 0), 3)
                    cv2.putText(image, text, (20, 50), cv2.FONT_HERSHEY_SIMPLEX, 2, (0, 255, 0), 2)
                    cv2.putText(image, "x: " + str(np.round(x, 2)), (500, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)
                    cv2.putText(image, "y: " + str(np.round(y, 2)), (500, 100), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)
                    cv2.putText(image, "z: " + str(np.round(z, 2)), (500, 150), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)

                    # Add the direction information to the DataFrame
                    df.loc[len(df)] = [filename, text]
                    print(f"Added direction for {filename}: {text}")

                end = time.time()
                totalTime = end - start
                fps = 1 / totalTime
                print("FPS: ", fps)
                cv2.putText(image, f'FPS: {int(fps)}', (20, 450), cv2.FONT_HERSHEY_SIMPLEX, 1.5, (0, 255, 0), 2)

                mp_drawing.draw_landmarks(image=image,
                                          landmark_list=face_landmarks,
                                          connections=mp_face_mesh.FACEMESH_CONTOURS,
                                          landmark_drawing_spec=drawing_spec,
                                          connection_drawing_spec=drawing_spec)
            else:
                print(f"No face landmarks detected for {filename}")

            output_path = os.path.join(output_dir, filename)
            cv2.imwrite(output_path, image)
        
        
    df1 = pd.DataFrame(data)
    csv_path = os.path.join(output_dir, "output_x_y.csv")
    df1.to_csv(csv_path, index=False)

    print("Excel file created successfully!")

    # Save continuous distribution plots for x and y values
    plt.figure(figsize=(10, 6))
    sns.kdeplot(x_values, fill=True)
    plt.title('Continuous Distribution Plot for X Values')
    plt.xlabel('Value')
    plt.ylabel('Density')
    plot_filename = os.path.join(output_dir, 'continuous_distribution_plot_x.png')
    plt.savefig(plot_filename)

    plt.figure(figsize=(10, 6))
    sns.kdeplot(y_values, fill=True)
    plt.title('Continuous Distribution Plot for Y Values')
    plt.xlabel('Value')
    plt.ylabel('Density')
    plot_filename = os.path.join(output_dir, 'continuous_distribution_plot_y.png')
    plt.savefig(plot_filename)

    # Save the DataFrame to a CSV file with a unique name
    csv_path = os.path.join(output_dir, "image_directions.csv")
    df.to_csv(csv_path, index=False)

print("Processing complete. Check the output directories for results.")
