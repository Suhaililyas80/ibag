import os
import json
from collections import defaultdict
import matplotlib.pyplot as plt

def plot_histogram(data, title, xlabel, ylabel, filename):
    plt.bar(data.keys(), data.values())
    plt.title(title)
    plt.xlabel(xlabel)
    plt.ylabel(ylabel)
    plt.savefig(filename)
    plt.show()

def read_json_files(folder_path):
    data_array = []

    # Loop through folder names from 001 to 600
    for i in range(1, 601):
        folder_name = f"{i:03d}"  # Format number with leading zeros (e.g., 001, 002, ..., 600)
        folder_full_path = os.path.join(folder_path, folder_name)
        json_file_path = os.path.join(folder_full_path, f"{folder_name}.json")

        # Check if JSON file exists in the folder
        if os.path.exists(json_file_path):
            with open(json_file_path, 'r') as json_file:
                data = json.load(json_file)
                data_array.append((folder_name, data))
        else:
            print(f"JSON file {json_file_path} does not exist.")

    return data_array

# Example usage:
folder_path = r'C:\i.bug data\112'  # Update this to the path where the folders are located
data_array = read_json_files(folder_path)

folder_names = [f"{i:03d}" for i in range(1, 601)]

# Initialize dictionaries to store arousal and valence values
arousal_count_total = defaultdict(int)
valence_count_total = defaultdict(int)
both_zero_count = 0

for folder_name, data in data_array:
    neutral_frames = []
    for frame_id, frame_data in data["frames"].items():
        arousal = frame_data.get("arousal", None)
        valence = frame_data.get("valence", None)
        if arousal is not None:
            arousal_count_total[arousal] += 1
        if valence is not None:
            valence_count_total[valence] += 1
        if arousal == 0 and valence == 0:
            both_zero_count += 1
            neutral_frames.append(frame_id)

    # Save neutral frame IDs to a JSON file in the same folder
    if neutral_frames:
        neutral_file_path = os.path.join(folder_path, folder_name, f"{folder_name}_neutral.json")
        with open(neutral_file_path, 'w') as neutral_file:
            json.dump({"neutral_frames": neutral_frames}, neutral_file)

# Optionally plot histograms
# plot_histogram(arousal_count_total, "Arousal Distribution", "Arousal Value", "Frequency", "arousal_histogram.png")
# plot_histogram(valence_count_total, "Valence Distribution", "Valence Value", "Frequency", "valence_histogram.png")
